{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.0\"},\"sources\":{\"contracts/IGO Vault/IGOVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\\\";\\nimport \\\"../Interfaces/ISpinStakable.sol\\\";\\nimport \\\"../Interfaces/IIGO.sol\\\";\\n\\n/// @title Spinstarter Vault\\n/// @author Spintop.Network\\n/// @notice Autocompounding Single Vault for IGO staking.\\n/// @dev Owner operates Vault, IGO, and IGOClaim contracts from this contracts interface.\\ncontract IGOVault is ERC20Upgradeable, PausableUpgradeable, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct VaultInfo {\\n        address admin;\\n        address pool;\\n        address tokenSpin;\\n    }\\n    VaultInfo public vaultInfo;\\n    address[] public IGOs;\\n    uint256 public maxStakeAmount;\\n    uint256 public minStakeAmount;\\n    uint256 private pilgrims;\\n    EnumerableSet.AddressSet private members_;\\n    uint256 public batchSize;\\n    uint256 public newVar;\\n    uint256 constant private MAX_INT = 2**256 - 1;\\n\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    function initialize(\\n        string memory _shareName,\\n        string memory _shareSymbol,\\n        address _pool,\\n        address _tokenSpin,\\n        address initialOwner\\n    ) initializer public {\\n        __ERC20_init(_shareName, _shareSymbol);\\n        __Ownable_init(initialOwner);\\n        vaultInfo.admin = _msgSender();\\n        vaultInfo.pool = _pool;\\n        vaultInfo.tokenSpin = _tokenSpin;\\n        IERC20(vaultInfo.tokenSpin).approve(vaultInfo.pool, MAX_INT);\\n        minStakeAmount = 1000e18;\\n        maxStakeAmount = 1000000e18;\\n        batchSize = 500;\\n        newVar = 2;\\n    }\\n\\n    // Admin functions //\\n\\n    function setMinStakeAmount (uint256 _minStakeAmount) external onlyOwner {\\n        minStakeAmount = _minStakeAmount;\\n    }\\n\\n    function setMaxStakeAmount (uint256 _maxStakeAmount) external onlyOwner {\\n        maxStakeAmount = _maxStakeAmount;\\n    }\\n\\n    function createIGO(address _igo) external onlyOwner whenPaused {\\n        IGOs.push(_igo);\\n    }\\n\\n    function migrateBalances () external onlyOwner whenPaused {\\n        address _igo = IGOs[IGOs.length-1];\\n        uint256 queue = members_.length() - pilgrims;\\n        uint256 target = queue < batchSize ? queue : batchSize;\\n        for (uint i = pilgrims; i < pilgrims+target; i++) {\\n            uint256 balanceOfMember = balanceOf(members_.at(i));\\n            if (balanceOfMember > 0) {\\n                IIGO(_igo).stake(members_.at(i), balanceOfMember);\\n            }\\n        }\\n        pilgrims += target;\\n        queue < batchSize ? pilgrims = 0 : pilgrims;\\n    }\\n\\n    function start() external onlyOwner whenPaused {\\n        address _igo = IGOs[IGOs.length-1];\\n        IIGO(_igo).start();\\n    }\\n\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    function setBatchSize (uint256 _batchSize) external onlyOwner {\\n        batchSize = _batchSize;\\n    }\\n\\n    function notifyVesting (address _igo, uint256 _percentage) external onlyOwner {\\n        IIGO(_igo).notifyVesting(_percentage);\\n    }\\n\\n    function setToken (address _igo, address _token, uint256 _decimal) external onlyOwner {\\n        IIGO(_igo).setToken(_token, _decimal);\\n    }\\n\\n    function setPeriods (address _igo, uint256 _allocationTime, uint256 _publicTime) external onlyOwner {\\n        IIGO(_igo).setPeriods(_allocationTime, _publicTime);\\n    }\\n\\n    function withdrawIGOFunds (address _igo, uint256 token) external onlyOwner {\\n        IIGO(_igo).withdrawFunds(token);\\n    }\\n\\n    // Private functions //\\n\\n    function addMember (address _member) private {\\n        if (!members_.contains(_member)) {\\n            members_.add(_member);\\n        }\\n    }\\n\\n    function removeMember (address _member) private {\\n        if (members_.contains(_member)) {\\n            members_.remove(_member);\\n        }\\n    }\\n\\n    function addToIGOs (uint256 amount) private {\\n        for (uint256 i; i<IGOs.length; i++) {\\n            IIGO _igo = IIGO(IGOs[i]);\\n            _igo.setStateVault();\\n            if (_igo.IGOstate()) {\\n                _igo.stake(_msgSender(),amount);\\n            }\\n        }\\n    }\\n\\n    function removeFromIGOs (uint256 amount) private {\\n        for (uint256 i; i<IGOs.length; i++) {\\n            IIGO _igo = IIGO(IGOs[i]);\\n            _igo.setStateVault();\\n            if (_igo.IGOstate()) {\\n                _igo.unstake(_msgSender(),amount);\\n            }\\n        }\\n    }\\n\\n    function compound() private {\\n        uint256 _earned = ISpinStakable(vaultInfo.pool).earned(address(this));\\n        if (_earned > 0) {\\n            ISpinStakable(vaultInfo.pool).getReward();\\n            ISpinStakable(vaultInfo.pool).stake(_earned);\\n        }\\n    }\\n\\n//    function _beforeTokenTransfer(address from, address to, uint256 amount)\\n//        internal\\n//        whenNotPaused\\n////        override\\n//    {\\n//        super._beforeTokenTransfer(from, to, amount);\\n//    }\\n\\n    // Public view functions //\\n\\n    function getUserStaked (address account) public view returns(uint256) {\\n        if (totalSupply() > 0) {\\n            return balance() * balanceOf(account) / totalSupply();\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function vaultBalance() public view returns (uint) {\\n        return IERC20(vaultInfo.tokenSpin).balanceOf(address(this));\\n    }\\n\\n    function balance() public view returns (uint) {\\n        return vaultBalance() + ISpinStakable(vaultInfo.pool).balanceOf(address(this));\\n    }\\n\\n    function membersLength() public view returns (uint256) {\\n        return members_.length();\\n    }\\n\\n    // Public mutative functions //\\n\\n    function deposit(uint _amount) external nonReentrant whenNotPaused {\\n        _deposit(_amount);\\n    }\\n\\n    function _deposit(uint _amount) private {\\n        uint256 totalAmount = _amount + getUserStaked(_msgSender());\\n        require(totalAmount < maxStakeAmount);\\n        compound();\\n        uint256 _bal = balance();\\n        IERC20(vaultInfo.tokenSpin).transferFrom(_msgSender(), address(this), _amount);\\n        if (vaultBalance() > 0) {\\n            ISpinStakable(vaultInfo.pool).stake(vaultBalance());\\n        }\\n        uint256 _after = balance();\\n        _amount = _after - _bal;\\n        uint256 shares = 0;\\n        if (totalSupply() == 0) {\\n            shares = _amount;\\n        } else {\\n            shares = _amount * totalSupply() / _bal;\\n        }\\n        if (shares > 0 && totalAmount >= minStakeAmount) {\\n            _mint(_msgSender(), shares);\\n            addToIGOs(shares);\\n            if (!members_.contains(_msgSender())){\\n                addMember(_msgSender());\\n            }\\n        }\\n    }\\n\\n    function withdraw(uint restakeAmount) external nonReentrant whenNotPaused {\\n        _withdraw();\\n        if (restakeAmount > 0) {\\n            _deposit(restakeAmount);\\n        }\\n    }\\n\\n    function _withdraw () private {\\n        compound();\\n        uint256 balanceOfSender = balanceOf(_msgSender());\\n        uint256 requested =  balance() * balanceOfSender / totalSupply();\\n        if (balanceOfSender > 0) {\\n            removeFromIGOs(balanceOf(_msgSender()));\\n            _burn(_msgSender(), balanceOf(_msgSender()));\\n        }\\n        uint vaultAvailable = IERC20(vaultInfo.tokenSpin).balanceOf(address(this));\\n        if (vaultAvailable < requested) {\\n            uint unstakeAmount = requested - vaultAvailable;\\n            ISpinStakable(vaultInfo.pool).unstake(unstakeAmount);\\n            uint vaultAvailableAfter = IERC20(vaultInfo.tokenSpin).balanceOf(address(this));\\n            uint diff = vaultAvailableAfter - vaultAvailable;\\n            if (diff < unstakeAmount) {\\n                requested = vaultAvailable + diff;\\n            }\\n        }\\n        IERC20(vaultInfo.tokenSpin).transfer(_msgSender(), requested);\\n        if (balanceOf(_msgSender()) == 0) {\\n            removeMember(_msgSender());\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.23\"},\"contracts/Interfaces/ISpinStakable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ISpinStakable {\\n    function stakingToken() external view returns (address);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n\\n    function rewardPerToken() external view returns (uint256);\\n\\n    function rewardRate() external view returns (uint256);\\n\\n    function periodFinish() external view returns (uint256);\\n\\n    function earned(address account) external view returns (uint256);\\n\\n    function getRewardForDuration() external view returns (uint256);\\n\\n    function totalRewardAdded() external view returns (uint256);\\n\\n    function unstakable(address account) external view returns (bool);\\n\\n    function stake(uint256 amount) external;\\n\\n    function unstake(uint256 amount) external;\\n\\n    function getReward() external;\\n\\n    function exit() external;\\n\\n    function notifyRewardAmount(uint256 reward) external;\\n\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) external;\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external;\\n\\n    function setUnlockDuration(uint256 _unlockDuration) external;\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n    event UnlockDurationUpdated(uint256 newDuration);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/Interfaces/IIGO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.23;\\n\\ninterface IIGO {\\n    // Events\\n    event ClaimContract(\\n        address vault,\\n        address igo,\\n        uint256 totalDollars,\\n        address paymentToken,\\n        uint256 price,\\n        uint256 priceDecimal,\\n        uint256 multiplier\\n    );\\n\\n    event DistributionStart(uint256 reward);\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    // Public and External Functions\\n    function withdrawFunds(uint256 token) external;\\n    function notifyVesting(uint256 _percentage) external;\\n    function setToken(address _token, uint256 _decimal) external;\\n    function setPeriods(uint256 _allocationTime, uint256 _publicTime) external;\\n    function start() external;\\n    function setStateVault() external;\\n    function lastTimeRewardApplicable() external view returns (uint256);\\n    function totalRewardAdded() external view returns (uint256);\\n    function balanceOf(address account) external view returns (uint256);\\n    function rewardPerToken() external view returns (uint256);\\n    function earned(address account) external view returns (uint256);\\n    function stake(address account, uint256 amount) external;\\n    function unstake(address account, uint256 amount) external;\\n\\n    // Getter Functions for Public Variables\\n    function gameName() external view returns (string memory);\\n    function IGOstate() external view returns (bool);\\n    function startDate() external view returns (uint256);\\n    function rewardRate() external view returns (uint256);\\n    function lastUpdateTime() external view returns (uint256);\\n    function rewardPerTokenStored() external view returns (uint256);\\n    function rewardsDuration() external view returns (uint256);\\n    function totalDollars() external view returns (uint256);\\n    function userRewardPerTokenPaid(address) external view returns (uint256);\\n    function rewards(address) external view returns (uint256);\\n    function _totalSupply() external view returns (uint256);\\n}\\n\",\"versionPragma\":\"^0.8.23\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.20\"}}}","address":"0x6115631191b07C82160F4481d93a39EB23E23471","bytecode":"0x608060405234801561001057600080fd5b5061001961001e565b6100d0565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00805468010000000000000000900460ff161561006e5760405163f92ee8a960e01b815260040160405180910390fd5b80546001600160401b03908116146100cd5780546001600160401b0319166001600160401b0390811782556040519081527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50565b61251080620000e06000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c80638b763a4211610130578063be9a6555116100b8578063dd62ed3e1161007c578063dd62ed3e146104c9578063eb4af045146104dc578063f1887684146104ef578063f2fde38b146104f8578063f4daaba11461050b57600080fd5b8063be9a655514610475578063c8987bc81461047d578063dac3fc3f14610490578063db0ed6a0146104a3578063dcc2a55e146104b657600080fd5b8063a438f000116100ff578063a438f0001461042c578063a9059cbb1461043f578063b2b4416714610452578063b69ef8a81461045a578063b6b55f251461046257600080fd5b80638b763a42146103ba5780638da5cb5b146103cd57806395d89b41146104115780639d1a35bd1461041957600080fd5b8063501ec738116101be5780636c359a86116101825780636c359a861461037b57806370a082311461038457806370adb51514610397578063715018a6146103aa5780638456cb59146103b257600080fd5b8063501ec738146102ea5780635284689614610334578063576f35e3146103475780635c975abb1461035a5780635d80ca321461037257600080fd5b806318160ddd1161020557806318160ddd1461029657806323b872dd146102ab5780632e1a7d4d146102be578063313ce567146102d35780633f4ba83a146102e257600080fd5b806306fdde0314610237578063095ea7b3146102555780630bf6cc08146102785780630f027c671461028e575b600080fd5b61023f610514565b60405161024c9190611fbd565b60405180910390f35b610268610263366004612023565b6105d7565b604051901515815260200161024c565b6102806105f1565b60405190815260200161024c565b610280610663565b60008051602061249b83398151915254610280565b6102686102b936600461204d565b61066f565b6102d16102cc366004612089565b610693565b005b6040516012815260200161024c565b6102d16106e6565b60005460015460025461030a926001600160a01b03908116928116911683565b604080516001600160a01b039485168152928416602084015292169181019190915260600161024c565b6102d16103423660046120a2565b610700565b6102d1610355366004612089565b610762565b6000805160206124bb8339815191525460ff16610268565b61028060045481565b610280600a5481565b6102806103923660046120a2565b61076f565b6102d16103a53660046120bd565b610797565b6102d1610806565b6102d1610818565b6102d16103c8366004612023565b610830565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03165b6040516001600160a01b03909116815260200161024c565b61023f610897565b6103f9610427366004612089565b6108d6565b6102d161043a36600461204d565b610900565b61026861044d366004612023565b61093d565b6102d161094b565b610280610ab4565b6102d1610470366004612089565b610b33565b6102d1610b4c565b6102d161048b366004612023565b610be6565b61028061049e3660046120a2565b610c1b565b6102d16104b1366004612193565b610c7c565b6102d16104c4366004612089565b610e69565b6102806104d7366004612229565b610e76565b6102d16104ea366004612089565b610ec0565b61028060055481565b6102d16105063660046120a2565b610ecd565b61028060095481565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03805460609160008051602061247b833981519152916105539061225c565b80601f016020809104026020016040519081016040528092919081815260200182805461057f9061225c565b80156105cc5780601f106105a1576101008083540402835291602001916105cc565b820191906000526020600020905b8154815290600101906020018083116105af57829003601f168201915b505050505091505090565b6000336105e5818585610f0d565b60019150505b92915050565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190612296565b905090565b600061065e6007610f1f565b60003361067d858285610f29565b610688858585610f89565b506001949350505050565b61069b610fe8565b6106a3611032565b6106ab611063565b80156106ba576106ba816112ef565b6106e360017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50565b6106ee6114db565b6106f6611536565b6106fe611566565b565b6107086114db565b610710611536565b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0392909216919091179055565b61076a6114db565b600955565b6001600160a01b0316600090815260008051602061247b833981519152602052604090205490565b61079f6114db565b60405163767ac36960e01b815260048101839052602481018290526001600160a01b0384169063767ac369906044015b600060405180830381600087803b1580156107e957600080fd5b505af11580156107fd573d6000803e3d6000fd5b50505050505050565b61080e6114db565b6106fe60006115c6565b6108206114db565b610828611032565b6106fe611637565b6108386114db565b604051630b1cfc9b60e11b8152600481018290526001600160a01b03831690631639f936906024015b600060405180830381600087803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b505050505050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04805460609160008051602061247b833981519152916105539061225c565b600381815481106108e657600080fd5b6000918252602090912001546001600160a01b0316905081565b6109086114db565b6040516378bf2b5360e01b81526001600160a01b038381166004830152602482018390528416906378bf2b53906044016107cf565b6000336105e5818585610f89565b6109536114db565b61095b611536565b600380546000919061096f906001906122c5565b8154811061097f5761097f6122d8565b60009182526020822001546006546001600160a01b0390911692506109a46007610f1f565b6109ae91906122c5565b9050600060095482106109c3576009546109c5565b815b6006549091505b816006546109da91906122ee565b811015610a7d5760006109f1610392600784611680565b90508015610a74576001600160a01b03851663adc9772e610a13600785611680565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015610a5b57600080fd5b505af1158015610a6f573d6000803e3d6000fd5b505050505b506001016109cc565b508060066000828254610a9091906122ee565b90915550506009548210610aa657600654610aae565b600060068190555b50505050565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b219190612296565b610b296105f1565b61065e91906122ee565b610b3b610fe8565b610b43611032565b6106ba816112ef565b610b546114db565b610b5c611536565b6003805460009190610b70906001906122c5565b81548110610b8057610b806122d8565b60009182526020822001546040805163be9a655560e01b815290516001600160a01b039092169350839263be9a65559260048084019382900301818387803b158015610bcb57600080fd5b505af1158015610bdf573d6000803e3d6000fd5b5050505050565b610bee6114db565b604051630aaeeaf760e11b8152600481018290526001600160a01b0383169063155dd5ee90602401610861565b600080610c3460008051602061249b8339815191525490565b1115610c6f5760008051602061249b83398151915254610c538361076f565b610c5b610ab4565b610c659190612301565b6105eb9190612318565b506000919050565b919050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610cc25750825b905060008267ffffffffffffffff166001148015610cdf5750303b155b905081158015610ced575080155b15610d0b5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610d3557845460ff60401b1916600160401b1785555b610d3f8a8a611693565b610d48866116a9565b33600080546001600160a01b03199081166001600160a01b03938416179091556001805482168b841690811790915560028054909216928a1692831790915560405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af1158015610dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df0919061233a565b50683635c9adc5dea0000060055569d3c21bcecceda10000006004556101f46009556002600a558315610e5d57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050565b610e716114db565b600455565b6001600160a01b0391821660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b610ec86114db565b600555565b610ed56114db565b6001600160a01b038116610f0457604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6106e3816115c6565b610f1a83838360016116ba565b505050565b60006105eb825490565b6000610f358484610e76565b90506000198114610aae5781811015610f7a57604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610efb565b610aae848484840360006116ba565b6001600160a01b038316610fb357604051634b637e8f60e11b815260006004820152602401610efb565b6001600160a01b038216610fdd5760405163ec442f0560e01b815260006004820152602401610efb565b610f1a8383836117a1565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0080546001190161102c57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000805160206124bb8339815191525460ff16156106fe5760405163d93c066560e01b815260040160405180910390fd5b61106b6118df565b60006110763361076f565b9050600061109060008051602061249b8339815191525490565b82611099610ab4565b6110a39190612301565b6110ad9190612318565b905081156110d8576110c66110c13361076f565b6119f6565b6110d8336110d33361076f565b611b5c565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111459190612296565b90508181101561125257600061115b82846122c5565b6001546040516305c2fbcf60e31b8152600481018390529192506001600160a01b031690632e17de7890602401600060405180830381600087803b1580156111a257600080fd5b505af11580156111b6573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015611205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112299190612296565b9050600061123784836122c5565b90508281101561124e5761124b81856122ee565b94505b5050505b6002546001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af11580156112b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d5919061233a565b506112df3361076f565b600003610f1a57610f1a33611b92565b60006112fa33610c1b565b61130490836122ee565b9050600454811061131457600080fd5b61131c6118df565b6000611326610ab4565b6002549091506001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018690526064016020604051808303816000875af115801561138e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b2919061233a565b5060006113bd6105f1565b111561142d576001546001600160a01b031663a694fc3a6113dc6105f1565b6040518263ffffffff1660e01b81526004016113fa91815260200190565b600060405180830381600087803b15801561141457600080fd5b505af1158015611428573d6000803e3d6000fd5b505050505b6000611437610ab4565b905061144382826122c5565b9350600061145d60008051602061249b8339815191525490565b60000361146b575083611499565b8261148260008051602061249b8339815191525490565b61148c9087612301565b6114969190612318565b90505b6000811180156114ab57506005548410155b15610bdf576114ba3382611bad565b6114c381611be3565b6114ce600733611d49565b610bdf57610bdf33611d6b565b3361150d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146106fe5760405163118cdaa760e01b8152336004820152602401610efb565b6000805160206124bb8339815191525460ff166106fe57604051638dfc202b60e01b815260040160405180910390fd5b61156e611536565b6000805160206124bb833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61163f611032565b6000805160206124bb833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336115a8565b600061168c8383611d85565b9392505050565b61169b611daf565b6116a58282611df8565b5050565b6116b1611daf565b6106e381611e49565b60008051602061247b8339815191526001600160a01b0385166116f35760405163e602df0560e01b815260006004820152602401610efb565b6001600160a01b03841661171d57604051634a1406b160e11b815260006004820152602401610efb565b6001600160a01b03808616600090815260018301602090815260408083209388168352929052208390558115610bdf57836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161179291815260200190565b60405180910390a35050505050565b60008051602061247b8339815191526001600160a01b0384166117dd57818160020160008282546117d291906122ee565b9091555061184f9050565b6001600160a01b038416600090815260208290526040902054828110156118305760405163391434e360e21b81526001600160a01b03861660048201526024810182905260448101849052606401610efb565b6001600160a01b03851660009081526020839052604090209083900390555b6001600160a01b03831661186d57600281018054839003905561188c565b6001600160a01b03831660009081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516118d191815260200190565b60405180910390a350505050565b6001546040516246613160e11b81523060048201526000916001600160a01b031690628cc26290602401602060405180830381865afa158015611926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194a9190612296565b905080156106e35760015460408051631e8c5c8960e11b815290516001600160a01b0390921691633d18b9129160048082019260009290919082900301818387803b15801561199857600080fd5b505af11580156119ac573d6000803e3d6000fd5b505060015460405163534a7e1d60e11b8152600481018590526001600160a01b03909116925063a694fc3a9150602401600060405180830381600087803b158015610bcb57600080fd5b60005b6003548110156116a557600060038281548110611a1857611a186122d8565b600091825260208220015460408051635178644360e01b815290516001600160a01b039092169350839263517864439260048084019382900301818387803b158015611a6357600080fd5b505af1158015611a77573d6000803e3d6000fd5b50505050806001600160a01b031663d478790c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add919061233a565b15611b53576001600160a01b03811663c2a672e0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b158015611b3a57600080fd5b505af1158015611b4e573d6000803e3d6000fd5b505050505b506001016119f9565b6001600160a01b038216611b8657604051634b637e8f60e11b815260006004820152602401610efb565b6116a5826000836117a1565b611b9d600782611d49565b156106e3576116a5600782611e51565b6001600160a01b038216611bd75760405163ec442f0560e01b815260006004820152602401610efb565b6116a5600083836117a1565b60005b6003548110156116a557600060038281548110611c0557611c056122d8565b600091825260208220015460408051635178644360e01b815290516001600160a01b039092169350839263517864439260048084019382900301818387803b158015611c5057600080fd5b505af1158015611c64573d6000803e3d6000fd5b50505050806001600160a01b031663d478790c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca919061233a565b15611d40576001600160a01b03811663adc9772e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b158015611d2757600080fd5b505af1158015611d3b573d6000803e3d6000fd5b505050505b50600101611be6565b6001600160a01b0381166000908152600183016020526040812054151561168c565b611d76600782611d49565b6106e3576116a5600782611e66565b6000826000018281548110611d9c57611d9c6122d8565b9060005260206000200154905092915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166106fe57604051631afcd79f60e31b815260040160405180910390fd5b611e00611daf565b60008051602061247b8339815191527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03611e3a84826123a4565b5060048101610aae83826123a4565b610ed5611daf565b600061168c836001600160a01b038416611e7b565b600061168c836001600160a01b038416611f6e565b60008181526001830160205260408120548015611f64576000611e9f6001836122c5565b8554909150600090611eb3906001906122c5565b9050808214611f18576000866000018281548110611ed357611ed36122d8565b9060005260206000200154905080876000018481548110611ef657611ef66122d8565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611f2957611f29612464565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105eb565b60009150506105eb565b6000818152600183016020526040812054611fb5575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105eb565b5060006105eb565b60006020808352835180602085015260005b81811015611feb57858101830151858201604001528201611fcf565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610c7757600080fd5b6000806040838503121561203657600080fd5b61203f8361200c565b946020939093013593505050565b60008060006060848603121561206257600080fd5b61206b8461200c565b92506120796020850161200c565b9150604084013590509250925092565b60006020828403121561209b57600080fd5b5035919050565b6000602082840312156120b457600080fd5b61168c8261200c565b6000806000606084860312156120d257600080fd5b6120db8461200c565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261211757600080fd5b813567ffffffffffffffff80821115612132576121326120f0565b604051601f8301601f19908116603f0116810190828211818310171561215a5761215a6120f0565b8160405283815286602085880101111561217357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156121ab57600080fd5b853567ffffffffffffffff808211156121c357600080fd5b6121cf89838a01612106565b965060208801359150808211156121e557600080fd5b506121f288828901612106565b9450506122016040870161200c565b925061220f6060870161200c565b915061221d6080870161200c565b90509295509295909350565b6000806040838503121561223c57600080fd5b6122458361200c565b91506122536020840161200c565b90509250929050565b600181811c9082168061227057607f821691505b60208210810361229057634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156122a857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105eb576105eb6122af565b634e487b7160e01b600052603260045260246000fd5b808201808211156105eb576105eb6122af565b80820281158282048414176105eb576105eb6122af565b60008261233557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561234c57600080fd5b8151801515811461168c57600080fd5b601f821115610f1a576000816000526020600020601f850160051c810160208610156123855750805b601f850160051c820191505b8181101561088f57828155600101612391565b815167ffffffffffffffff8111156123be576123be6120f0565b6123d2816123cc845461225c565b8461235c565b602080601f83116001811461240757600084156123ef5750858301515b600019600386901b1c1916600185901b17855561088f565b600085815260208120601f198616915b8281101561243657888601518255948401946001909101908401612417565b50858210156124545787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a264697066735822122042638fb6aa0358afbfb3a15cd7a491a8a82cbfd5809e4a486f1369185af28b7b64736f6c63430008170033","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106102325760003560e01c80638b763a4211610130578063be9a6555116100b8578063dd62ed3e1161007c578063dd62ed3e146104c9578063eb4af045146104dc578063f1887684146104ef578063f2fde38b146104f8578063f4daaba11461050b57600080fd5b8063be9a655514610475578063c8987bc81461047d578063dac3fc3f14610490578063db0ed6a0146104a3578063dcc2a55e146104b657600080fd5b8063a438f000116100ff578063a438f0001461042c578063a9059cbb1461043f578063b2b4416714610452578063b69ef8a81461045a578063b6b55f251461046257600080fd5b80638b763a42146103ba5780638da5cb5b146103cd57806395d89b41146104115780639d1a35bd1461041957600080fd5b8063501ec738116101be5780636c359a86116101825780636c359a861461037b57806370a082311461038457806370adb51514610397578063715018a6146103aa5780638456cb59146103b257600080fd5b8063501ec738146102ea5780635284689614610334578063576f35e3146103475780635c975abb1461035a5780635d80ca321461037257600080fd5b806318160ddd1161020557806318160ddd1461029657806323b872dd146102ab5780632e1a7d4d146102be578063313ce567146102d35780633f4ba83a146102e257600080fd5b806306fdde0314610237578063095ea7b3146102555780630bf6cc08146102785780630f027c671461028e575b600080fd5b61023f610514565b60405161024c9190611fbd565b60405180910390f35b610268610263366004612023565b6105d7565b604051901515815260200161024c565b6102806105f1565b60405190815260200161024c565b610280610663565b60008051602061249b83398151915254610280565b6102686102b936600461204d565b61066f565b6102d16102cc366004612089565b610693565b005b6040516012815260200161024c565b6102d16106e6565b60005460015460025461030a926001600160a01b03908116928116911683565b604080516001600160a01b039485168152928416602084015292169181019190915260600161024c565b6102d16103423660046120a2565b610700565b6102d1610355366004612089565b610762565b6000805160206124bb8339815191525460ff16610268565b61028060045481565b610280600a5481565b6102806103923660046120a2565b61076f565b6102d16103a53660046120bd565b610797565b6102d1610806565b6102d1610818565b6102d16103c8366004612023565b610830565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b03165b6040516001600160a01b03909116815260200161024c565b61023f610897565b6103f9610427366004612089565b6108d6565b6102d161043a36600461204d565b610900565b61026861044d366004612023565b61093d565b6102d161094b565b610280610ab4565b6102d1610470366004612089565b610b33565b6102d1610b4c565b6102d161048b366004612023565b610be6565b61028061049e3660046120a2565b610c1b565b6102d16104b1366004612193565b610c7c565b6102d16104c4366004612089565b610e69565b6102806104d7366004612229565b610e76565b6102d16104ea366004612089565b610ec0565b61028060055481565b6102d16105063660046120a2565b610ecd565b61028060095481565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03805460609160008051602061247b833981519152916105539061225c565b80601f016020809104026020016040519081016040528092919081815260200182805461057f9061225c565b80156105cc5780601f106105a1576101008083540402835291602001916105cc565b820191906000526020600020905b8154815290600101906020018083116105af57829003601f168201915b505050505091505090565b6000336105e5818585610f0d565b60019150505b92915050565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa15801561063a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061065e9190612296565b905090565b600061065e6007610f1f565b60003361067d858285610f29565b610688858585610f89565b506001949350505050565b61069b610fe8565b6106a3611032565b6106ab611063565b80156106ba576106ba816112ef565b6106e360017f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0055565b50565b6106ee6114db565b6106f6611536565b6106fe611566565b565b6107086114db565b610710611536565b600380546001810182556000919091527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b0319166001600160a01b0392909216919091179055565b61076a6114db565b600955565b6001600160a01b0316600090815260008051602061247b833981519152602052604090205490565b61079f6114db565b60405163767ac36960e01b815260048101839052602481018290526001600160a01b0384169063767ac369906044015b600060405180830381600087803b1580156107e957600080fd5b505af11580156107fd573d6000803e3d6000fd5b50505050505050565b61080e6114db565b6106fe60006115c6565b6108206114db565b610828611032565b6106fe611637565b6108386114db565b604051630b1cfc9b60e11b8152600481018290526001600160a01b03831690631639f936906024015b600060405180830381600087803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b505050505050565b7f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace04805460609160008051602061247b833981519152916105539061225c565b600381815481106108e657600080fd5b6000918252602090912001546001600160a01b0316905081565b6109086114db565b6040516378bf2b5360e01b81526001600160a01b038381166004830152602482018390528416906378bf2b53906044016107cf565b6000336105e5818585610f89565b6109536114db565b61095b611536565b600380546000919061096f906001906122c5565b8154811061097f5761097f6122d8565b60009182526020822001546006546001600160a01b0390911692506109a46007610f1f565b6109ae91906122c5565b9050600060095482106109c3576009546109c5565b815b6006549091505b816006546109da91906122ee565b811015610a7d5760006109f1610392600784611680565b90508015610a74576001600160a01b03851663adc9772e610a13600785611680565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101849052604401600060405180830381600087803b158015610a5b57600080fd5b505af1158015610a6f573d6000803e3d6000fd5b505050505b506001016109cc565b508060066000828254610a9091906122ee565b90915550506009548210610aa657600654610aae565b600060068190555b50505050565b6001546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610afd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b219190612296565b610b296105f1565b61065e91906122ee565b610b3b610fe8565b610b43611032565b6106ba816112ef565b610b546114db565b610b5c611536565b6003805460009190610b70906001906122c5565b81548110610b8057610b806122d8565b60009182526020822001546040805163be9a655560e01b815290516001600160a01b039092169350839263be9a65559260048084019382900301818387803b158015610bcb57600080fd5b505af1158015610bdf573d6000803e3d6000fd5b5050505050565b610bee6114db565b604051630aaeeaf760e11b8152600481018290526001600160a01b0383169063155dd5ee90602401610861565b600080610c3460008051602061249b8339815191525490565b1115610c6f5760008051602061249b83398151915254610c538361076f565b610c5b610ab4565b610c659190612301565b6105eb9190612318565b506000919050565b919050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff16600081158015610cc25750825b905060008267ffffffffffffffff166001148015610cdf5750303b155b905081158015610ced575080155b15610d0b5760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff191660011785558315610d3557845460ff60401b1916600160401b1785555b610d3f8a8a611693565b610d48866116a9565b33600080546001600160a01b03199081166001600160a01b03938416179091556001805482168b841690811790915560028054909216928a1692831790915560405163095ea7b360e01b81526004810191909152600019602482015263095ea7b3906044016020604051808303816000875af1158015610dcc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df0919061233a565b50683635c9adc5dea0000060055569d3c21bcecceda10000006004556101f46009556002600a558315610e5d57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b50505050505050505050565b610e716114db565b600455565b6001600160a01b0391821660009081527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace016020908152604080832093909416825291909152205490565b610ec86114db565b600555565b610ed56114db565b6001600160a01b038116610f0457604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b6106e3816115c6565b610f1a83838360016116ba565b505050565b60006105eb825490565b6000610f358484610e76565b90506000198114610aae5781811015610f7a57604051637dc7a0d960e11b81526001600160a01b03841660048201526024810182905260448101839052606401610efb565b610aae848484840360006116ba565b6001600160a01b038316610fb357604051634b637e8f60e11b815260006004820152602401610efb565b6001600160a01b038216610fdd5760405163ec442f0560e01b815260006004820152602401610efb565b610f1a8383836117a1565b7f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f0080546001190161102c57604051633ee5aeb560e01b815260040160405180910390fd5b60029055565b6000805160206124bb8339815191525460ff16156106fe5760405163d93c066560e01b815260040160405180910390fd5b61106b6118df565b60006110763361076f565b9050600061109060008051602061249b8339815191525490565b82611099610ab4565b6110a39190612301565b6110ad9190612318565b905081156110d8576110c66110c13361076f565b6119f6565b6110d8336110d33361076f565b611b5c565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015611121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111459190612296565b90508181101561125257600061115b82846122c5565b6001546040516305c2fbcf60e31b8152600481018390529192506001600160a01b031690632e17de7890602401600060405180830381600087803b1580156111a257600080fd5b505af11580156111b6573d6000803e3d6000fd5b50506002546040516370a0823160e01b8152306004820152600093506001600160a01b0390911691506370a0823190602401602060405180830381865afa158015611205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112299190612296565b9050600061123784836122c5565b90508281101561124e5761124b81856122ee565b94505b5050505b6002546001600160a01b031663a9059cbb336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602481018590526044016020604051808303816000875af11580156112b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d5919061233a565b506112df3361076f565b600003610f1a57610f1a33611b92565b60006112fa33610c1b565b61130490836122ee565b9050600454811061131457600080fd5b61131c6118df565b6000611326610ab4565b6002549091506001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018690526064016020604051808303816000875af115801561138e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113b2919061233a565b5060006113bd6105f1565b111561142d576001546001600160a01b031663a694fc3a6113dc6105f1565b6040518263ffffffff1660e01b81526004016113fa91815260200190565b600060405180830381600087803b15801561141457600080fd5b505af1158015611428573d6000803e3d6000fd5b505050505b6000611437610ab4565b905061144382826122c5565b9350600061145d60008051602061249b8339815191525490565b60000361146b575083611499565b8261148260008051602061249b8339815191525490565b61148c9087612301565b6114969190612318565b90505b6000811180156114ab57506005548410155b15610bdf576114ba3382611bad565b6114c381611be3565b6114ce600733611d49565b610bdf57610bdf33611d6b565b3361150d7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146106fe5760405163118cdaa760e01b8152336004820152602401610efb565b6000805160206124bb8339815191525460ff166106fe57604051638dfc202b60e01b815260040160405180910390fd5b61156e611536565b6000805160206124bb833981519152805460ff191681557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a150565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b61163f611032565b6000805160206124bb833981519152805460ff191660011781557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258336115a8565b600061168c8383611d85565b9392505050565b61169b611daf565b6116a58282611df8565b5050565b6116b1611daf565b6106e381611e49565b60008051602061247b8339815191526001600160a01b0385166116f35760405163e602df0560e01b815260006004820152602401610efb565b6001600160a01b03841661171d57604051634a1406b160e11b815260006004820152602401610efb565b6001600160a01b03808616600090815260018301602090815260408083209388168352929052208390558115610bdf57836001600160a01b0316856001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161179291815260200190565b60405180910390a35050505050565b60008051602061247b8339815191526001600160a01b0384166117dd57818160020160008282546117d291906122ee565b9091555061184f9050565b6001600160a01b038416600090815260208290526040902054828110156118305760405163391434e360e21b81526001600160a01b03861660048201526024810182905260448101849052606401610efb565b6001600160a01b03851660009081526020839052604090209083900390555b6001600160a01b03831661186d57600281018054839003905561188c565b6001600160a01b03831660009081526020829052604090208054830190555b826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516118d191815260200190565b60405180910390a350505050565b6001546040516246613160e11b81523060048201526000916001600160a01b031690628cc26290602401602060405180830381865afa158015611926573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061194a9190612296565b905080156106e35760015460408051631e8c5c8960e11b815290516001600160a01b0390921691633d18b9129160048082019260009290919082900301818387803b15801561199857600080fd5b505af11580156119ac573d6000803e3d6000fd5b505060015460405163534a7e1d60e11b8152600481018590526001600160a01b03909116925063a694fc3a9150602401600060405180830381600087803b158015610bcb57600080fd5b60005b6003548110156116a557600060038281548110611a1857611a186122d8565b600091825260208220015460408051635178644360e01b815290516001600160a01b039092169350839263517864439260048084019382900301818387803b158015611a6357600080fd5b505af1158015611a77573d6000803e3d6000fd5b50505050806001600160a01b031663d478790c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ab9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611add919061233a565b15611b53576001600160a01b03811663c2a672e0336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b158015611b3a57600080fd5b505af1158015611b4e573d6000803e3d6000fd5b505050505b506001016119f9565b6001600160a01b038216611b8657604051634b637e8f60e11b815260006004820152602401610efb565b6116a5826000836117a1565b611b9d600782611d49565b156106e3576116a5600782611e51565b6001600160a01b038216611bd75760405163ec442f0560e01b815260006004820152602401610efb565b6116a5600083836117a1565b60005b6003548110156116a557600060038281548110611c0557611c056122d8565b600091825260208220015460408051635178644360e01b815290516001600160a01b039092169350839263517864439260048084019382900301818387803b158015611c5057600080fd5b505af1158015611c64573d6000803e3d6000fd5b50505050806001600160a01b031663d478790c6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca919061233a565b15611d40576001600160a01b03811663adc9772e336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015260248101869052604401600060405180830381600087803b158015611d2757600080fd5b505af1158015611d3b573d6000803e3d6000fd5b505050505b50600101611be6565b6001600160a01b0381166000908152600183016020526040812054151561168c565b611d76600782611d49565b6106e3576116a5600782611e66565b6000826000018281548110611d9c57611d9c6122d8565b9060005260206000200154905092915050565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff166106fe57604051631afcd79f60e31b815260040160405180910390fd5b611e00611daf565b60008051602061247b8339815191527f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace03611e3a84826123a4565b5060048101610aae83826123a4565b610ed5611daf565b600061168c836001600160a01b038416611e7b565b600061168c836001600160a01b038416611f6e565b60008181526001830160205260408120548015611f64576000611e9f6001836122c5565b8554909150600090611eb3906001906122c5565b9050808214611f18576000866000018281548110611ed357611ed36122d8565b9060005260206000200154905080876000018481548110611ef657611ef66122d8565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611f2957611f29612464565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506105eb565b60009150506105eb565b6000818152600183016020526040812054611fb5575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105eb565b5060006105eb565b60006020808352835180602085015260005b81811015611feb57858101830151858201604001528201611fcf565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b0381168114610c7757600080fd5b6000806040838503121561203657600080fd5b61203f8361200c565b946020939093013593505050565b60008060006060848603121561206257600080fd5b61206b8461200c565b92506120796020850161200c565b9150604084013590509250925092565b60006020828403121561209b57600080fd5b5035919050565b6000602082840312156120b457600080fd5b61168c8261200c565b6000806000606084860312156120d257600080fd5b6120db8461200c565b95602085013595506040909401359392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261211757600080fd5b813567ffffffffffffffff80821115612132576121326120f0565b604051601f8301601f19908116603f0116810190828211818310171561215a5761215a6120f0565b8160405283815286602085880101111561217357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600060a086880312156121ab57600080fd5b853567ffffffffffffffff808211156121c357600080fd5b6121cf89838a01612106565b965060208801359150808211156121e557600080fd5b506121f288828901612106565b9450506122016040870161200c565b925061220f6060870161200c565b915061221d6080870161200c565b90509295509295909350565b6000806040838503121561223c57600080fd5b6122458361200c565b91506122536020840161200c565b90509250929050565b600181811c9082168061227057607f821691505b60208210810361229057634e487b7160e01b600052602260045260246000fd5b50919050565b6000602082840312156122a857600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b818103818111156105eb576105eb6122af565b634e487b7160e01b600052603260045260246000fd5b808201808211156105eb576105eb6122af565b80820281158282048414176105eb576105eb6122af565b60008261233557634e487b7160e01b600052601260045260246000fd5b500490565b60006020828403121561234c57600080fd5b8151801515811461168c57600080fd5b601f821115610f1a576000816000526020600020601f850160051c810160208610156123855750805b601f850160051c820191505b8181101561088f57828155600101612391565b815167ffffffffffffffff8111156123be576123be6120f0565b6123d2816123cc845461225c565b8461235c565b602080601f83116001811461240757600084156123ef5750858301515b600019600386901b1c1916600185901b17855561088f565b600085815260208120601f198616915b8281101561243657888601518255948401946001909101908401612417565b50858210156124545787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052603160045260246000fdfe52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace0052c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace02cd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300a264697066735822122042638fb6aa0358afbfb3a15cd7a491a8a82cbfd5809e4a486f1369185af28b7b64736f6c63430008170033","abi":[{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"allowance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientAllowance","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"uint256","name":"balance","type":"uint256"},{"internalType":"uint256","name":"needed","type":"uint256"}],"name":"ERC20InsufficientBalance","type":"error"},{"inputs":[{"internalType":"address","name":"approver","type":"address"}],"name":"ERC20InvalidApprover","type":"error"},{"inputs":[{"internalType":"address","name":"receiver","type":"address"}],"name":"ERC20InvalidReceiver","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"}],"name":"ERC20InvalidSender","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"}],"name":"ERC20InvalidSpender","type":"error"},{"inputs":[],"name":"EnforcedPause","type":"error"},{"inputs":[],"name":"ExpectedPause","type":"error"},{"inputs":[],"name":"InvalidInitialization","type":"error"},{"inputs":[],"name":"NotInitializing","type":"error"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"OwnableInvalidOwner","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"OwnableUnauthorizedAccount","type":"error"},{"inputs":[],"name":"ReentrancyGuardReentrantCall","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint64","name":"version","type":"uint64"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Paused","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"account","type":"address"}],"name":"Unpaused","type":"event"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"IGOs","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"balance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"batchSize","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_igo","type":"address"}],"name":"createIGO","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"decimals","outputs":[{"internalType":"uint8","name":"","type":"uint8"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"_amount","type":"uint256"}],"name":"deposit","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"getUserStaked","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"string","name":"_shareName","type":"string"},{"internalType":"string","name":"_shareSymbol","type":"string"},{"internalType":"address","name":"_pool","type":"address"},{"internalType":"address","name":"_tokenSpin","type":"address"},{"internalType":"address","name":"initialOwner","type":"address"}],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"maxStakeAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"membersLength","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"migrateBalances","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"minStakeAmount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"newVar","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_igo","type":"address"},{"internalType":"uint256","name":"_percentage","type":"uint256"}],"name":"notifyVesting","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"paused","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_batchSize","type":"uint256"}],"name":"setBatchSize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_maxStakeAmount","type":"uint256"}],"name":"setMaxStakeAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"_minStakeAmount","type":"uint256"}],"name":"setMinStakeAmount","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_igo","type":"address"},{"internalType":"uint256","name":"_allocationTime","type":"uint256"},{"internalType":"uint256","name":"_publicTime","type":"uint256"}],"name":"setPeriods","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_igo","type":"address"},{"internalType":"address","name":"_token","type":"address"},{"internalType":"uint256","name":"_decimal","type":"uint256"}],"name":"setToken","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"start","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"unpause","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vaultBalance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"vaultInfo","outputs":[{"internalType":"address","name":"admin","type":"address"},{"internalType":"address","name":"pool","type":"address"},{"internalType":"address","name":"tokenSpin","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"restakeAmount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"_igo","type":"address"},{"internalType":"uint256","name":"token","type":"uint256"}],"name":"withdrawIGOFunds","outputs":[],"stateMutability":"nonpayable","type":"function"}]}